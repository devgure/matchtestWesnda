// backend/prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  email              String    @unique
  phone              String?   @unique
  password           String?   // null for OAuth users
  name               String
  birthDate          DateTime
  gender             String
  preferredGender    String?
  bio                String?
  photos             String[]  // URLs
  location           Json?     // { type: "Point", coordinates: [lng, lat] }
  isVerified         Boolean   @default(false)
  isPremium          Boolean   @default(false)
  premiumTier        String?   // "gold", "platinum"
  deviceToken        String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  matches            Match[]   @relation("UserMatches")
  sentLikes          Like[]    @relation("LikeSender")
  receivedLikes      Like[]    @relation("LikeReceiver")
  chats              Chat[]    @relation("ChatUsers")
  reports            Report[]  @relation("Reporter")
  reportedUser       Report[]  @relation("ReportedUser")

  @@index([location], type: Gi) // Geospatial index
  @@map("users")
}

model Like {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  sender      User     @relation("LikeSender", fields: [senderId], references: [id])
  senderId    String   @db.ObjectId
  receiver    User     @relation("LikeReceiver", fields: [receiverId], references: [id])
  receiverId  String   @db.ObjectId
  isSuper     Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@unique([senderId, receiverId])
  @@map("likes")
}

model Match {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user1      User     @relation("UserMatches", fields: [user1Id], references: [id])
  user1Id    String   @db.ObjectId
  user2      User     @relation("UserMatches", fields: [user2Id], references: [id])
  user2Id    String   @db.ObjectId
  chat       Chat?
  matchedAt  DateTime @default(now())

  @@unique([user1Id, user2Id])
  @@map("matches")
}

model Chat {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  users      User[]     @relation("ChatUsers")
  messages   Message[]
  createdAt  DateTime   @default(now())

  @@map("chats")
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String   @db.ObjectId
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  String   @db.ObjectId
  text      String?
  image     String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("messages")
}

model Report {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  reporter       User     @relation("Reporter", fields: [reporterId], references: [id])
  reporterId     String   @db.ObjectId
  reportedUser   User     @relation("ReportedUser", fields: [reportedUserId], references: [id])
  reportedUserId String   @db.ObjectId
  reason         String
  details        String?
  status         String   @default("pending") // pending, reviewed, banned
  createdAt      DateTime @default(now())

  @@map("reports")
}

model Subscription {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  user          User     @relation(fields: [userId], references: [id])
  userId        String   @db.ObjectId
  stripeId      String   @unique
  plan          String   // "basic", "gold", "platinum"
  status        String   // active, canceled, past_due
  currentPeriodEnd DateTime
  createdAt     DateTime @default(now())

  @@map("subscriptions")
}